{"ast":null,"code":"var _jsxFileName = \"/Users/anmolsingh/React_Project/my-app/src/questions-page/questions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport WithQuestions from './with-questions';\nimport QuestionItem from './question-item';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionsList = _ref => {\n  _s();\n\n  let {\n    questions\n  } = _ref;\n  let responses = useRef({});\n  let [is_submitted, set_is_submitted] = useState(false);\n  useEffect(() => {\n    window.addEventListener('set_question_response', setQuestionResponse);\n    return () => {\n      window.removeEventListener('set_question_response', setQuestionResponse);\n    };\n  }, []);\n\n  const handleReset = () => window.location.reload();\n\n  const setQuestionResponse = ev => {\n    let {\n      varname,\n      selected_option\n    } = ev.detail;\n    let previous_responses = { ...responses.current\n    };\n    previous_responses[varname] = selected_option;\n    responses.current = previous_responses;\n  };\n\n  const handleSubmit = () => {\n    let updated_responses = { ...responses.current\n    };\n    console.log('submit clicked with: ', updated_responses);\n    fetch(\"http://localhost:5000/post_survey_responses\", {\n      method: \"POST\",\n      body: JSON.stringify(updated_responses),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(response => {\n      if (response.status == 200) {\n        set_is_submitted(true);\n      }\n    });\n  };\n\n  return is_submitted ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"after-submission\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"after-submission-text\",\n      children: \"Thanks for taking the time to fill out the survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"button center pointer\",\n      onClick: handleReset,\n      children: \"Fill out another survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions-list center\",\n      children: questions.map(question => /*#__PURE__*/_jsxDEV(QuestionItem, {\n        question: question\n      }, question.varname, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 47\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button center pointer\",\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QuestionsList, \"LclwVY1bhmYRiNm0dh6wthiAdSE=\");\n\n_c = QuestionsList;\nexport default (() => {\n  return /*#__PURE__*/_jsxDEV(WithQuestions, {\n    QuestionsList: QuestionsList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 12\n  }, this);\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsList\");","map":{"version":3,"sources":["/Users/anmolsingh/React_Project/my-app/src/questions-page/questions.js"],"names":["React","useEffect","useRef","useState","WithQuestions","QuestionItem","QuestionsList","questions","responses","is_submitted","set_is_submitted","window","addEventListener","setQuestionResponse","removeEventListener","handleReset","location","reload","ev","varname","selected_option","detail","previous_responses","current","handleSubmit","updated_responses","console","log","fetch","method","body","JSON","stringify","headers","then","response","status","map","question"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;;;;AAEA,MAAMC,aAAa,GAAG,QAAmB;AAAA;;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AAErC,MAAIC,SAAS,GAAGN,MAAM,CAAC,EAAD,CAAtB;AAEA,MAAI,CAACO,YAAD,EAAeC,gBAAf,IAAmCP,QAAQ,CAAC,KAAD,CAA/C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,MAAM,CAACC,gBAAP,CAAwB,uBAAxB,EAAiDC,mBAAjD;AACA,WAAO,MAAM;AACTF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,uBAA3B,EAAoDD,mBAApD;AACH,KAFD;AAGH,GALQ,EAKN,EALM,CAAT;;AAOA,QAAME,WAAW,GAAG,MAAMJ,MAAM,CAACK,QAAP,CAAgBC,MAAhB,EAA1B;;AAEA,QAAMJ,mBAAmB,GAAIK,EAAD,IAAQ;AAChC,QAAI;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA+BF,EAAE,CAACG,MAAtC;AACA,QAAIC,kBAAkB,GAAG,EAAE,GAAGd,SAAS,CAACe;AAAf,KAAzB;AACAD,IAAAA,kBAAkB,CAACH,OAAD,CAAlB,GAA8BC,eAA9B;AACAZ,IAAAA,SAAS,CAACe,OAAV,GAAoBD,kBAApB;AACH,GALD;;AAOA,QAAME,YAAY,GAAG,MAAM;AACvB,QAAIC,iBAAiB,GAAG,EAAE,GAAGjB,SAAS,CAACe;AAAf,KAAxB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,iBAArC;AACAG,IAAAA,KAAK,CAAC,6CAAD,EAAgD;AACjDC,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,iBAAf,CAF2C;AAGjDQ,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHwC,KAAhD,CAAL,CAMGC,IANH,CAMQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AACxB1B,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH;AACJ,KAVD;AAWH,GAdD;;AAgBA,SAAOD,YAAY,gBACf;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACI;AAAM,MAAA,SAAS,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,SAAS,EAAC,uBAAhB;AAAwC,MAAA,OAAO,EAAEM,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADe,gBAMf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,gBAEQR,SAAS,CAAC8B,GAAV,CAAcC,QAAQ,iBAAI,QAAC,YAAD;AAAqC,QAAA,QAAQ,EAAEA;AAA/C,SAAmBA,QAAQ,CAACnB,OAA5B;AAAA;AAAA;AAAA;AAAA,cAA1B;AAFR;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAuC,MAAA,OAAO,EAAEK,YAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA,kBANJ;AAkBH,CAxDD;;GAAMlB,a;;KAAAA,a;AA0DN,gBAAe,MAAM;AACjB,sBAAO,QAAC,aAAD;AAAe,IAAA,aAAa,EAAEA;AAA9B;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAFD","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport WithQuestions from './with-questions';\nimport QuestionItem from './question-item';\n\nconst QuestionsList = ({ questions }) => {\n\n    let responses = useRef({});\n\n    let [is_submitted, set_is_submitted] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener('set_question_response', setQuestionResponse);\n        return () => {\n            window.removeEventListener('set_question_response', setQuestionResponse);\n        }\n    }, []);\n\n    const handleReset = () => window.location.reload();\n\n    const setQuestionResponse = (ev) => {\n        let { varname, selected_option } = ev.detail;\n        let previous_responses = { ...responses.current };\n        previous_responses[varname] = selected_option;\n        responses.current = previous_responses;\n    };\n\n    const handleSubmit = () => {\n        let updated_responses = { ...responses.current };\n        console.log('submit clicked with: ', updated_responses);\n        fetch(\"http://localhost:5000/post_survey_responses\", {\n            method: \"POST\",\n            body: JSON.stringify(updated_responses),\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        }).then(response => {\n            if (response.status == 200) {\n                set_is_submitted(true);\n            }\n        });\n    }\n\n    return is_submitted ? (\n        <div className=\"after-submission\">\n            <span className=\"after-submission-text\">Thanks for taking the time to fill out the survey</span>\n            <span className=\"button center pointer\" onClick={handleReset}>Fill out another survey</span>\n        </div>\n    ) : (\n        <>\n            <div className=\"questions-list center\">\n                {\n                    questions.map(question => <QuestionItem key={question.varname} question={question} />)\n                }\n\n            </div>\n            <div className=\"button center pointer\" onClick={handleSubmit}>\n                Submit\n            </div>\n        </>\n    );\n}\n\nexport default () => {\n    return <WithQuestions QuestionsList={QuestionsList} />;\n};"]},"metadata":{},"sourceType":"module"}